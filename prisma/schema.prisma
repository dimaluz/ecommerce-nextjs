// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

//                                  Authentication models
enum UserRole {
  ADMIN
  CUSTOMER
}


model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole        @default(CUSTOMER)
  accounts            Account[]
  store               Store[]
  isTwoFactorEnabled  Boolean         @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String  @id @default(cuid())
  email   String
  token   String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String    @id     @default(cuid())
  userId    String 
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//                            Store models

model Store {
  id          String      @id @default(cuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  owner User @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model Billboard {
  id          String  @id @default(cuid())
  storeId     String 
  store       Store   @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id            String      @id @default(cuid())
  storeId       String
  store         Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard   @relation(fields: [billboardId], references: [id])
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String    @id @default(cuid())
  storeId     String
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([storeId])
}

model Color {
  id          String    @id @default(cuid())
  storeId     String
  store       Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([storeId])
}